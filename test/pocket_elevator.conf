name: Elevator v1.0t

slots:
    core:
        class: CoreUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    databank:
        class: databank
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    gyro:
        class: GyroUnit
    button:
        class: ManualButtonUnit
        select: manual

handlers:
    unit:
        onStart:
            lua: |
                apTickRate = 0.05 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.
                AutoDocking = true --export: Enable Auto docking
                DockToId = "3437130" --export: Construct ids for autoDocking separated by coma
                DockToId = load('return {'..DockToId..'}')
                AutoBraking = true --export: Enable Auto braking

                --idCloseArr = construct.getCloseParents()
                --system.print("ID=".. idCloseArr[1])

                --PIDS
                verPID = pid.new(0.1, 0, 1)
                lonPID = pid.new(0.1, 0, 1)
                latPID = pid.new(0.1, 0, 1)
                vPid = pid.new(0.1, 0, 0)
                vPid2 = pid.new(0.1, 0, 0)
                vPid3 = pid.new(2, 0, 12)
                rollPID = pid.new(0.1, 0, 1)
                pitchPID = pid.new(0.1, 0, 1)
                yawPID = pid.new(4, 0, 12)

                --VARS
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0
                verticalInput = 0
                lateralInput = 0
                longitudinalInput = 0
                followInput = 0
                globalPitch = 0
                goingBack = false
                goingForward = false
                followDistance = 20
                baseAcceleration = 30
                circleRad = 0
                showHud = true
                followMode = false
                holdMode = false
                landMode = false
                lastSpeed = 0

                atmofueltank = {}
                atmofueltank[1] = atmofueltank_1
                atmofueltank_size = 1

                yawSpeedFactor =  5 
                brakeSpeedFactor = 2 
                brakeFlatFactor = 1 
                torqueFactor = 2
                followForce = 0.01

                inpFactor = 15


                unit.hideWidget()
                core.hideWidget()
                system.showScreen(1)
                system.showHelper(0)
                if laser then laser.activate() end
                if switch_l then switch_l.deactivate() end
                if switch_r then switch_r.deactivate() end
                if switch_3 then
                    if AutoBraking==false then    
                        switch_3.activate()
                    else
                        switch_3.deactivate()
                    end
                end

                unit.setTimer("dock", 1)
                unit.setTimer("hudy", apTickRate)
                unit.setTimer("fuel", 1)

                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})

                if Nav.control.isRemoteControlled() == 1 then
                    player.freeze(1)
                end
        onStop:
            lua: |
                core.hideWidget()
                if switch_l then switch_l.deactivate() end
                if switch_r then switch_r.deactivate() end
                if switch_3 then switch_3.deactivate() end 
                if laser then laser.deactivate() end
    
        onTimer:
            args: [dock]
            lua: |
                --3850861
                --3854387
                --system.print(construct.getParent())
                if AutoDocking == true and construct.getParent() == 0 then
                    local closeParentsId = construct.getCloseParents()
                    local closeParentId = closeParentsId[1]
                    for _,d in ipairs(DockToId) do
                        if closeParentId == d then
                            core.dock(d)
                            break
                        end
                    end
                end

        onTimer:
            args: [fuel]
            lua: |
                updateFuel()

        onTimer:
            args: [hudy]
            lua: |
                system.setScreen(hud:html())  

    system:
        onFlush:
            lua: |
                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput
                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local worldG = vec3(core.getWorldGravity())
                local constructUp = vec3(construct.getWorldOrientationUp())
                local constructForward = vec3(construct.getWorldOrientationForward())
                local constructRight = vec3(construct.getWorldOrientationRight())
                local constructAngularVelocity = vec3(construct.getWorldAngularVelocity())
                local constructVelocity = vec3(construct.getWorldVelocity())
                local constructVelocityDir = vec3(construct.getWorldVelocity()):normalize()

                local finalLongitudinalInput = longitudinalInput
                local finalLateralInput = lateralInput
                local finalVerticalInput = verticalInput

                if holdMode then
                    finalPitchInput=0
                    finalRollInput=0
                    finalYawInput=0
                    finalLongitudinalInput=0
                    finalLateralInput=0
                    finalVerticalInput=0
                    finalBrakeInput=1
                end

                if landMode then
                    finalPitchInput=0
                    finalRollInput=0
                    local telemeterDist = telemeter and telemeter.raycast and telemeter.raycast().distance or -1
                    local verticalVelocity = -vec3(construct.getWorldVelocity()):dot(vec3(core.getWorldGravity()))
                    local desiredVerticalVelocity = telemeter and -100 or -30

                    if telemeterDist >= 0 then
                        desiredVerticalVelocity = -telemeterDist
                        if telemeterDist < 1.5 then
                            endLanding()
                            if switch_l then switch_l.deactivate() end
                        end
                    end

                    local deltaVerticalVelocity = desiredVerticalVelocity - verticalVelocity / 3.6
                    vPid:inject(deltaVerticalVelocity)
                    finalVerticalInput = utils.clamp(vPid:get(),-1,1)
                end

                if followMode and telemeter then
                    longitudinalInput=0
                    lon = constructForward*67
                    if math.floor(telemeter.raycast().distance)<=followDistance then
                        lon = constructForward*0
                    end
                else
                    lon = constructForward*(longitudinalInput)*inpFactor
                end

                --Pitch
                local realPitch= getPitch(worldVertical,constructForward,constructRight)
                pitchPID:inject(globalPitch-realPitch)

                --Roll
                local rollDir = constructForward
                local currentRollDeg = getRoll(worldVertical, rollDir, constructRight) 
                rollPID:inject(-currentRollDeg)

                --Yaw
                local yawDirection = worldVertical
                if finalYawInput == 0 then
                    local yawVelocity = vec3(construct.getWorldAngularVelocity()):dot(constructUp) 
                    yawPID:inject(yawVelocity)
                    finalYawInput = -yawPID:get()
                end

                local targetAngularVelocity = 
                    rollPID:get() * rollDir
                    + pitchPID:get() * constructRight
                    + (-finalYawInput * yawSpeedFactor * yawDirection)
                    
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)

                -- Engine commands
                if finalLateralInput == 0 and AutoBraking then
                    latPID:inject(-vec3(construct.getWorldVelocity()):dot(constructRight))
                    finalLateralInput = latPID:get()
                end
                
                if finalLongitudinalInput == 0 and AutoBraking then
                    lonPID:inject(-vec3(construct.getWorldVelocity()):dot(constructForward))
                    finalLongitudinalInput = lonPID:get()
                end
                
                if finalVerticalInput == 0 then
                    verPID:inject(-vec3(construct.getWorldVelocity()):dot(constructUp))
                    finalVerticalInput = verPID:get()*10
                end
                
                local acceleration =
                    finalLongitudinalInput*constructForward*inpFactor
                    +finalLateralInput*constructRight*inpFactor
                    +finalVerticalInput*constructUp*inpFactor
                    -worldG

                if holdMode then
                    Nav:setEngineForceCommand('brake', -constructVelocityDir*10000, 1, '', '', '', 100)
                    Nav:setEngineForceCommand('not_ground', -worldG, 0, '', '', '', 0.1)
                elseif landMode then
                    Nav:setEngineForceCommand('brake,not_ground', acceleration, 0, 'brake', '', '', 50)
                elseif AutoBraking and longitudinalInput == 0 and lateralInput == 0 then
                    if verticalInput == 0 then
                        Nav:setEngineForceCommand('brake', -constructVelocityDir*10000, 1, '', '', '', 100)
                        Nav:setEngineForceCommand('not_ground', -worldG, 0, '', '', '', 100)
                    else
                        Nav:setEngineForceCommand('brake', -constructVelocity*finalBrakeInput, 1, '', '', '', 100)
                        Nav:setEngineForceCommand('not_ground,brake', acceleration, 0, '', '', '', 0.1)
                    end
                else
                    Nav:setEngineForceCommand('brake', -constructVelocity*finalBrakeInput, 1, '', '', '', 100)
                    Nav:setEngineForceCommand('not_ground', acceleration, 0, '', '', '', 0.1)
                end
                            
                Nav:setEngineTorqueCommand('torque', angularAcceleration, 1, 'torque', '', '', 100)

        onUpdate:
            lua: |
                Nav:update()

        onActionStart:
            args: [option1]
            lua: |
                if holdMode then
                    setHoldMode(false)
                else
                    setHoldMode(true)
                end

        onActionStart:
            args: [option2]
            lua: |
                if landMode then
                    setLandMode(false)
                else
                    setLandMode(true)
                end

        onActionStart:
            args: [option3]
            lua: |
                if AutoBraking==true then
                    AutoBraking = false
                    if switch_3 then switch_3.activate() end
                    lastSpeed = vec3(construct.getWorldVelocity()):dot(vec3(construct.getWorldOrientationForward()))
                else
                    AutoBraking = true
                    if switch_3 then switch_3.deactivate() end
                    lastSpeed = 0
                end
                
        onActionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.deployLandingGears()
                else
                    Nav.control.retractLandingGears()
                end
                
        onActionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        onActionStart:
            args: [forward]
            lua: |
                longitudinalInput = 1
                lastSpeed = 0
        onActionStop:
            args: [forward]
            lua: |
                longitudinalInput = 0
                lastSpeed = vec3(construct.getWorldVelocity()):dot(vec3(construct.getWorldOrientationForward()))
        onActionStart:
            args: [backward]
            lua: |
                longitudinalInput = -1
                lastSpeed = 0
        onActionStop:
            args: [backward]
            lua: |
                longitudinalInput = 0
                lastSpeed = vec3(construct.getWorldVelocity()):dot(vec3(construct.getWorldOrientationForward()))
        onActionStart:
            args: [left]
            lua: |
                yawInput = 1
        onActionStop:
            args: [left]
            lua: |
                yawInput = 0
        onActionStart:
            args: [right]
            lua: |
                yawInput = - 1
        onActionStop:
            args: [right]
            lua: |
                yawInput = 0
        onActionStart:
            args: [up]
            lua: |
                verticalInput = 1
        onActionStop:
            args: [up]
            lua: |
                verticalInput = 0
        onActionStart:
            args: [down]
            lua: |
                verticalInput = -1
        onActionStop:
            args: [down]
            lua: |
                verticalInput = 0
        onActionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        onActionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)

        onActionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        onActionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        onActionStart:
            args: [yawright]
            lua: lateralInput = 1
        onActionStop:
            args: [yawright]
            lua: lateralInput = 0
        onActionStart:
            args: [yawleft]
            lua: lateralInput = -1
        onActionStop:
            args: [yawleft]
            lua: lateralInput = 0

        onActionStart:
            args: [brake]
            lua: |
                brakeInput = 1
                lastSpeed = 0
        onActionStop:
            args: [brake]
            lua: |
                brakeInput = 0
                lastSpeed = vec3(construct.getWorldVelocity()):dot(vec3(construct.getWorldOrientationForward()))
        onActionLoop:
            args: [brake]
            lua: |
                brakeInput = brakeInput + 1
                
        onActionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        onActionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        onActionStart:
            args: [speedup]
            lua: -- not used
        onActionStop:
            args: [speedup]
            lua:  -- not used
        onActionStart:
            args: [speeddown]
            lua:  -- not used
        onActionStop:
            args: [speeddown]    
            lua:  -- not used
        onActionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end

    switch_r:
        onPressed:
            lua: |
                setHoldMode(true)
        onReleased:
            lua: |
                setHoldMode(false)
    switch_l:
        onPressed:
            lua: |
                setLandMode(true)
        onReleased:
            lua: |
                setLandMode(false)

    switch_3:
        onPressed:
            lua: |
                AutoBraking = false
                --switch_3.activate()
                lastSpeed = vec3(construct.getWorldVelocity()):dot(vec3(construct.getWorldOrientationForward()))
        onReleased:
            lua: |
                AutoBraking = true
                --switch_3.deactivate()
                lastSpeed = 0

    library:
        onStart:
            lua: |
                --Helper functions
                function setLandMode(status)
                    landMode = status
                    if status == false then
                        if switch_l then switch_l.activate() end
                        lastSpeed = 0
                        globalPitch = 0
                    else
                        if switch_l then switch_l.deactivate() end
                        verticalInput = 0
                    end
                end

                function setHoldMode(status)
                    holdMode = status
                    if status == false then
                        if switch_r then switch_r.activate() end
                        player.freeze(1)
                    else
                        if switch_r then switch_r.deactivate() end
                        player.freeze(0)
                        lastSpeed = 0
                    end
                end

                endLanding = function ()
                    setLandMode(false)
                end

                function round(val, decimal)
                  local exp = decimal and 10^decimal or 1
                  return math.ceil(val * exp - 0.5) / exp
                end


                buf = {}
                buf[1]=0
                buf[2]=0
                buf[3]=0
                medianCounter = 1
                function median(newVal)
                  buf[medianCounter] = newVal
                  local nextCount = medianCounter+1      
                  if nextCount > 3 then 
                      medianCounter = 1
                  else
                     medianCounter = nextCount
                  end
                  if math.max(buf[1], buf[2]) == math.max(buf[2], buf[3]) then
                     return math.max(buf[1], buf[3])
                  else
                     return math.max(buf[2], math.min(buf[1], buf[3]))
                  end
                end



                function getPitch(gravityDirection, forward, right)
                    local horizontalForward = gravityDirection:cross(right):normalize_inplace() -- Cross forward?
                    local pitch = math.acos(utils.clamp(horizontalForward:dot(-forward), -1, 1)) * constants.rad2deg -- acos?
                    if horizontalForward:cross(-forward):dot(right) < 0 then pitch = -pitch end -- Cross right dot forward?
                    return pitch
                end


                holdText = function()
                    if holdMode then
                        return "HOLD"
                    end
                    return ""
                end

                noBrakeText = function()
                    if not landMode and not AutoBraking then
                        return "FREE"
                    end
                    return ""
                end


                landText = function()
                    if landMode then
                        return [[<span class="blink">LANDING</span>]]
                    end
                    return ""
                end


                altitue = function() 
                    local seaAlt = core.getAltitude()
                    local telemeterDist = telemeter and telemeter.raycast and telemeter.raycast().distance or -1
                    if telemeterDist >= 0 then
                       return math.floor(telemeterDist)
                    end
                    return math.floor(seaAlt)
                end


                hspeed = function() 
                    local speedV=vec3(construct.getWorldVelocity())
                    local up=vec3(core.getWorldGravity())
                    local project= speedV:project_on(up)
                    local speedH=speedV-project
                    local len = math.floor(speedH:len()*3.6)
                    return len
                end


                vspeedSymbol = function()
                    local speedV=vec3(construct.getWorldVelocity())
                    local up=vec3(core.getWorldGravity())
                    local project= speedV:project_on(up)
                    local len = math.floor(project:len()*3.6)
                    local zAxis = math.floor(project.z)
                    symbol = ""
                    if len > 0 then
                        if zAxis > 0 then
                            symbol = "&#8593;"
                        elseif zAxis < 0 then
                            symbol = "&#8595;"     
                        end
                    end
                    return symbol
                end


                vspeed = function() 
                    local speedV=vec3(construct.getWorldVelocity())
                    local up=vec3(core.getWorldGravity())
                    local project= speedV:project_on(up)
                    local len = math.floor(project:len()*3.6)
                    return len
                end


                accel = function() 
                  return round(median(vec3(construct.getWorldAcceleration()):len()/9.81),1)
                end


                fuelTimeLeft = {}
                fuelPercent = {}
                updateFuel = function()
                    if (atmofueltank_size > 0) then 
                        for i = 1, atmofueltank_size do
                            fuelTimeLeft[i] = json.decode(atmofueltank[i].getWidgetData()).timeLeft
                            fuelPercent[i] = json.decode(atmofueltank[i].getWidgetData()).percentage
                        end
                    end
                end


                getFuelPercent = function(i)
                    return fuelPercent[i]
                end


                getFuelTime = function(i)
                    if (fuelTimeLeft[i] ~= "n/a" and fuelTimeLeft[i] ~= nil) then
                       return math.floor(fuelTimeLeft[i] / 60)
                    else
                       return 0
                    end
                end

        onStart:
            lua: |
                --HUD CLASS
                block = {}
                function block:new(content,style,tag)
                    local obj={}
                    obj.tag = tag or "div"
                    obj.style = style or ""
                    obj.content = {}
                    table.insert(obj.content,content)
                    
                    function obj:css(css) 
                        self.style = self.style .. css .. ";"
                    end
                    
                    function obj:set(html)
                        for i,v in ipairs(self.content) do 
                            self.content[i] = nil
                       end
                        table.insert(self.content,html)
                    end
                    
                    function obj:add(html)
                        table.insert(self.content,html)
                    end
                    
                    function obj:html()
                        local res = "<".. self.tag .." style='"..self.style .."'>"
                        for i,v in ipairs(self.content) do  
                            if type(v) == "table" then
                                if v['html']==nil then 
                                    system.print("ERROR TABLE INPUT")
                                else
                                    res = res .. v:html()
                                end
                            elseif type(v)=="function" then
                                 bres = v()
                                 if bres == nil then
                                     res = res .. ""
                                 else
                                     res = res .. v()
                                 end
                            else 
                                res = res .. v
                            end
                        end
                        res = res .. "</".. self.tag ..">"
                        return  res
                    end
                        
                    setmetatable(obj, self)
                    self.__index = self; return obj
                end

        onStart:
            lua: |
                --HUD CONTENT
                hud = block:new("","","html") 

                styles = [[
                <style>
                .blink {
                  animation: blink1 2s linear infinite;
                }
                @keyframes blink1 {
                  0% { color: rgba(240, 67, 32, 1); }
                  50% { color: rgba(240, 67, 32, 0); }
                  100% { color: rgba(240, 67, 32, 1); }
                }
                </style>
                ]]

                hud:add(styles)

                footer = block:new()

                footerBG = block:new()
                footerBG:css("position: absolute")
                footerBG:css("border-top: 3px solid #F4F4F4")
                footerBG:css("border-left: 1px solid #F4F4F4")
                footerBG:css("border-right: 1px solid #F4F4F4")
                footerBG:css("box-sizing: border-box")
                footerBG:css("border-radius: 50%")
                footerBG:css("filter: blur(1px)")
                footerBG:css("height:34vh")
                footerBG:css("width:26vw")
                footerBG:css("padding:1vh")
                --footerBG:css("z-index:-100")

                footerPanel = block:new()

                footerPanel:css("font-size: 3vh")
                footerPanel:css("color: #F4F4F4")
                footerPanel:css("position:relative")

                footerHoldText = block:new()
                footerHoldText:css("position:absolute")
                footerHoldText:css("color: #41C179")
                footerHoldText:css("left:0vw")
                footerHoldText:css("top:10vh")
                footerHoldText:css("width:100%")
                footerHoldText:css("text-align:center")
                footerHoldText:add(holdText)
                footerPanel:add(footerHoldText)

                footerLandText = block:new()
                footerLandText:css("position:absolute")
                footerLandText:css("color: #41C179")
                footerLandText:css("left:0vw")
                footerLandText:css("top:13vh")
                footerLandText:css("width:100%")
                footerLandText:css("text-align:center")
                footerLandText:add(landText)
                footerPanel:add(footerLandText)

                footerNoBrakeText = block:new()
                footerNoBrakeText:css("position:absolute")
                footerNoBrakeText:css("color: #41C179")
                footerNoBrakeText:css("left:0vw")
                footerNoBrakeText:css("top:13vh")
                footerNoBrakeText:css("width:100%")
                footerNoBrakeText:css("text-align:center")
                footerNoBrakeText:add(noBrakeText)
                footerPanel:add(footerNoBrakeText)

                footerHSpeedText = block:new()
                footerHSpeedText:css("position:absolute")
                footerHSpeedText:css("left:0vw")
                footerHSpeedText:css("top:10vh")
                footerHSpeedText:add("SPD<span style='font-size:1.5vh;'>h</span>")
                footerPanel:add(footerHSpeedText)

                footerHSpeedVal = block:new()
                footerHSpeedVal:css("position:absolute")
                footerHSpeedVal:css("left:4.5vw")
                footerHSpeedVal:css("top:10vh")
                footerHSpeedVal:css("width:2.8vw")
                footerHSpeedVal:css("text-align:right")
                footerHSpeedVal:add(hspeed)
                footerPanel:add(footerHSpeedVal)

                footerHSpeedAfter = block:new()
                footerHSpeedAfter:css("position:absolute")
                footerHSpeedAfter:css("left:7.6vw")
                footerHSpeedAfter:css("top:10vh")
                footerHSpeedAfter:add(" <span style='font-size:1.5vh;'>km\\h</span>")
                footerPanel:add(footerHSpeedAfter)


                footerVSpeedText = block:new()
                footerVSpeedText:css("position:absolute")
                footerVSpeedText:css("left:0vw")
                footerVSpeedText:css("top:13vh")
                footerVSpeedText:add("SPD<span style='font-size:1.5vh;'>v</span>")
                footerPanel:add(footerVSpeedText)

                footerVSpeedSymbol = block:new()
                footerVSpeedSymbol:css("position:absolute")
                footerVSpeedSymbol:css("left:3.5vw")
                footerVSpeedSymbol:css("top:13vh")
                footerVSpeedSymbol:add(vspeedSymbol)
                footerPanel:add(footerVSpeedSymbol)

                footerVSpeedVal = block:new()
                footerVSpeedVal:css("position:absolute")
                footerVSpeedVal:css("left:4.5vw")
                footerVSpeedVal:css("top:13vh")
                footerVSpeedVal:css("width:2.8vw")
                footerVSpeedVal:css("text-align:right")
                footerVSpeedVal:add(vspeed)
                footerPanel:add(footerVSpeedVal)

                footerVSpeedAfter = block:new()
                footerVSpeedAfter:css("position:absolute")
                footerVSpeedAfter:css("left:7.6vw")
                footerVSpeedAfter:css("top:13vh")
                footerVSpeedAfter:add(" <span style='font-size:1.5vh;'>km\\h</span>")
                footerPanel:add(footerVSpeedAfter)


                footerAltText = block:new()
                footerAltText:css("position:absolute")
                footerAltText:css("right:6.5vw")
                footerAltText:css("top:10vh")
                footerAltText:add("ALT")
                footerPanel:add(footerAltText)

                footerAltVal = block:new()
                footerAltVal:css("position:absolute")
                footerAltVal:css("right:2.3vw")
                footerAltVal:css("top:10vh")
                footerAltVal:css("width:3.6vw")
                footerAltVal:css("text-align:right")
                footerAltVal:add(altitue)
                footerPanel:add(footerAltVal)

                footerAltAfter = block:new()
                footerAltAfter:css("position:absolute")
                footerAltAfter:css("right:1.5vw")
                footerAltAfter:css("top:10vh")
                footerAltAfter:add(" <span style='font-size:1.5vh;'>m</span>")
                footerPanel:add(footerAltAfter)


                footerPitchText = block:new()
                footerPitchText:css("position:absolute")
                footerPitchText:css("right:6.5vw")
                footerPitchText:css("top:13vh")
                footerPitchText:add("ACC")
                footerPanel:add(footerPitchText)

                footerPitchVal = block:new()
                footerPitchVal:css("position:absolute")
                footerPitchVal:css("right:2.3vw")
                footerPitchVal:css("top:13vh")
                footerPitchVal:css("width:3.6vw")
                footerPitchVal:css("text-align:right")
                footerPitchVal:add(accel)
                footerPanel:add(footerPitchVal)

                footerPitchAfter = block:new()
                footerPitchAfter:css("position:absolute")
                footerPitchAfter:css("right:1.5vw")
                footerPitchAfter:css("top:13vh")
                footerPitchAfter:add("<span style='font-size:1.5vh;'>g</span>")
                footerPanel:add(footerPitchAfter)



                footer:css("position: absolute")
                footer:css("bottom:10vh")
                footer:css("left:37vw")
                footer:css("height:17vh")
                footer:css("width:26vw")
                footer:css("overflow:hidden")
                footer:add(footerPanel)

                hud:add(footer)

                PrimaryR = 244
                PrimaryG = 244
                PrimaryB = 244

                rgb = [[rgb(]] .. PrimaryR.. "," .. PrimaryG.. "," .. PrimaryB.. [[)]]
                rgbdim = [[rgb(]] .. PrimaryR .. "," .. PrimaryG.. "," .. PrimaryB .. [[)]]
                rgbdimmer = [[rgb(]] .. PrimaryR .. "," .. PrimaryG .. "," .. PrimaryB .. [[)]]
                function updateHud()
                    local svg = ""
                    local leftX=80
                    local rightX=80
                    local rgbO = rgb
                    local rgbdimO = rgbdim
                    local rgbdimmerO = rgbdimmer
                    svg = [[
                        <svg style="background:none; position:absolute; top:0; left:0" height="100vh" width="100vw" viewBox="0 0 1920 1080">
                        <g class="majorLine" style="stroke:]]..rgbO..[[;stroke-width:3;fill-opacity:0;">
                            <path d="M 700 0 L 740 35 Q 960 55 1180 35 L 1220 0"/>
                        </g>
                        ]]
                    local color, colorMod
                    x1 = 920
                    if (atmofueltank_size > 0) then 
                        for i = 1, atmofueltank_size do
                            local fuelTimeDisplay = fuelTimeLeft[i]
                            if fuelPercent[i] ~= nil then
                                
                                colorMod = math.floor(fuelPercent[i]*2.55)
                                if (fuelTimeDisplay ~= "n/a") then
                                    fuelTimeDisplay = math.floor(fuelTimeDisplay / 60)
                                    if (fuelTimeDisplay > 1) then
                                        color = [[rgb(]] .. 255-colorMod .. "," .. colorMod .. "," .. 0 .. [[)]]
                                    else
                                        color = [[rgb(]] .. 255 .. "," .. 0 .. "," .. 0 .. [[)]]
                                    end
                                else
                                    color = [[rgb(]] .. 255-colorMod .. "," .. colorMod .. "," .. 0 .. [[)]]
                                end
                                svg = svg..[[
                                    <g class="text">
                                        <g font-size=18>
                                            <text x="]]..x1..[[" y="32" text-anchor="end" style="fill:]] .. rgbO .. [[">FUEL</text>
                                            <text x="]]..(x1+120)..[[" y="32" text-anchor="end" style="fill:]] .. color .. [[">]]..fuelPercent[i]..[[% ]]..fuelTimeDisplay..[[ min</text>
                                        </g>
                                    </g>]]
                                x1 = x1+150
                            end
                        end
                    end
                    -- After the HUD, set RGB values back to undimmed even if view is unlocked
                    rgb = rgbO
                    rgbdim = rgbdimO
                    rgbdimmer = rgbdimmerO
                    svg = svg..[[</svg>]]
                    return svg
                end

                hud:add(updateHud)
