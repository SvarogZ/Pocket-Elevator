{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"switch_3","type":{"events":[],"methods":[]}},"2":{"name":"atmofueltank_1","type":{"events":[],"methods":[]}},"3":{"name":"switch_l","type":{"events":[],"methods":[]}},"4":{"name":"atmofueltank_2","type":{"events":[],"methods":[]}},"5":{"name":"switch_r","type":{"events":[],"methods":[]}},"6":{"name":"laser","type":{"events":[],"methods":[]}},"7":{"name":"telemeter","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"AutoBraking = false\nswitch_3.activate()\nlastSpeed = vec3(core.getWorldVelocity()):dot(vec3(core.getConstructWorldOrientationForward()))","filter":{"args":[],"signature":"pressed()","slotKey":"1"},"key":"0"},{"code":"AutoBraking = true\nswitch_3.deactivate()\nlastSpeed = 0","filter":{"args":[],"signature":"released()","slotKey":"1"},"key":"1"},{"code":"landMode = false\nverticalInput = 0\n","filter":{"args":[],"signature":"released()","slotKey":"3"},"key":"2"},{"code":"landMode =true\nlastSpeed = 0\nglobalPitch = 0","filter":{"args":[],"signature":"pressed()","slotKey":"3"},"key":"3"},{"code":"holdMode = false\nsystem.freeze(1)","filter":{"args":[],"signature":"released()","slotKey":"5"},"key":"4"},{"code":"holdMode = true\nlastSpeed = 0\nsystem.freeze(0)","filter":{"args":[],"signature":"pressed()","slotKey":"5"},"key":"5"},{"code":"system.setScreen(hud:html())  \n","filter":{"args":[{"value":"hud"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"6"},{"code":"if landMode == false then\n    if switch_l.getState()==1 then\n        switch_l.deactivate()\n    end     \nend","filter":{"args":[{"value":"button"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"7"},{"code":"core.hide()\nswitch_l.deactivate()\nswitch_r.deactivate()\nswitch_3.deactivate() \nlaser.deactivate()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"8"},{"code":"apTickRate = 0.05 --export: Set the Tick Rate for your HUD.  0.016667 is effectively 60 fps and the default value. 0.03333333 is 30 fps.  The bigger the number the less often the autopilot and hud updates but may help peformance on slower machings.\nAutoDocking = true --export: Enable Auto docking\nDockToId = 3437130 --export: Construct id for autoDocking\nAutoBraking = true --export: Enable Auto braking\n\n--idCloseArr = core.getCloseParents()\n--system.print(\"ID=\".. idCloseArr[1])\n\n--PIDS\nverPID = pid.new(20, 0, 1)\nlonPID = pid.new(4, 0, 0)\nlatPID = pid.new(0.1, 0, 0)\nvPid = pid.new(0.1, 0, 0)\nvPid2 = pid.new(0.1, 0, 0)\nvPid3 = pid.new(2, 0, 12)\nrollPID = pid.new(0.1, 0, 1)\npitchPID = pid.new(0.1, 0, 1)\nyawPID = pid.new(4, 0, 12)\n\n\n--VARS\npitchInput = 0\nrollInput = 0\nyawInput = 0\nbrakeInput = 0\nverticalInput = 0\nlateralInput = 0\nlongitudinalInput = 0\nfollowInput = 0\nglobalPitch = 0\ngoingBack = false\ngoingForward = false\nfollowDistance = 20\nbaseAcceleration = 30\ncircleRad = 0\nshowHud = true\nfollowMode = false\nholdMode = false\nlandMode = false\nlastSpeed = 0\n\natmofueltank = {}\natmofueltank[1] = atmofueltank_1\natmofueltank_size = 1\n\nyawSpeedFactor =  5 \nbrakeSpeedFactor = 2 \nbrakeFlatFactor = 1 \ntorqueFactor = 2\nfollowForce = 0.01\n\ninpFactor = 15\n\n\nunit.hide()\ncore.hide()\nsystem.showScreen(1)\nsystem.showHelper(0)\nlaser.activate()\nswitch_l.deactivate()\nswitch_r.deactivate()\nswitch_3.deactivate() \nif AutoBraking==false then\n   switch_3.activate() \nend\n\nunit.setTimer(\"dock\", 0.3)\nunit.setTimer(\"hud\", apTickRate)\nunit.setTimer(\"button\", 0.1)\nunit.setTimer(\"fuel\", 0.7)\n\nNav = Navigator.new(system, core, unit)\nNav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})\n\nif Nav.control.isRemoteControlled() == 1 then\n    system.freeze(1)\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"9"},{"code":"updateFuel()","filter":{"args":[{"value":"fuel"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"10"},{"code":"--3850861\n--3854387\n--system.print(core.getParent())\nif AutoDocking == true then\nif core.getParent() == 0 then\n   local sendDock = false\n   local cParents = core.getCloseParents()\n   for i,v in ipairs(cParents) do\n       if v == DockToId then\n           sendDock = true\n       end\n   end\n   if sendDock == true then\n        --system.print(\"send dock\")\n        core.dock(DockToId)\n        --local res = core.dock(3850861)\n        --system.print(res)\n    end\nend\nend","filter":{"args":[{"value":"dock"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"11"},{"code":"Nav:update()","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"12"},{"code":"-- final inputs\nlocal finalPitchInput = pitchInput + system.getControlDeviceForwardInput()\nlocal finalRollInput = rollInput + system.getControlDeviceYawInput()\nlocal finalYawInput = yawInput - system.getControlDeviceLeftRightInput()\nlocal finalBrakeInput = brakeInput\n-- Axis\nlocal worldVertical = vec3(core.getWorldVertical()) -- along gravity\nlocal worldG = vec3(core.getWorldGravity())\nlocal constructUp = vec3(core.getConstructWorldOrientationUp())\nlocal constructForward = vec3(core.getConstructWorldOrientationForward())\nlocal constructRight = vec3(core.getConstructWorldOrientationRight())\nlocal constructAngularVelocity = vec3(core.getWorldAngularVelocity())\nlocal constructVelocity = vec3(core.getWorldVelocity())\nlocal constructVelocityDir = vec3(core.getWorldVelocity()):normalize()\n\nlocal lat = constructRight*(lateralInput)*inpFactor/2.4\nlocal ver = constructUp*(verticalInput)*inpFactor\nlocal lon = constructForward*(longitudinalInput)*inpFactor\n\n\nif holdMode then\n    pitchInput=0\n    rollInput=0\n    yawInput=0\n    longitudinalInput=0\n    lateralInput=0\n    verticalInput=0\nend\n\nif landMode then\n    pitchInput=0\n    local telemeterDist = telemeter.getDistance()\n    local vVel = -vec3(core.getWorldVelocity()):dot(vec3(core.getWorldGravity()))\n    local gVel = -100\n    local vMultiple = 4\n    if telemeterDist < 0 then\n        local deltaVel = utils.clamp((gVel*vMultiple)-vVel,gVel*vMultiple,0)\n        vPid2:inject(deltaVel)\n        local limited2 = utils.clamp(vPid2:get()/vMultiple*(-gVel),-1, 0)\n        verticalInput=limited2\n    else\n       verticalInput=0\n       if telemeterDist < 1.5 then\n          endLanding()\n          switch_l.deactivate()\n       else\n          if telemeterDist < 10 then\n              verticalInput=-0.4\n          else \n              if vVel < gVel then\n                    verticalInput=1\n              else \n                  vPid:inject(vVel)\n                  local limited = vPid:get()\n                  limited=utils.clamp((1/limited),-1, -0.001)\n                  if limited == -0.001 then\n                     limited = -1\n                  end\n                  verticalInput=-1*-limited\n              end      \n          end\n       end\n    end\nend\n\nif followMode then\n    longitudinalInput=0\n    lon = constructForward*67\n    if math.floor(telemeter.getDistance())<followDistance or math.floor(telemeter.getDistance())==followDistance then\n        lon = constructForward*0\n    end\nelse\n    lon = constructForward*(longitudinalInput)*inpFactor\nend\n\n\n--Pitch\nlocal realPitch= getPitch(worldG,constructForward,constructRight)\npitchPID:inject(globalPitch-realPitch)\n\n--Roll\nlocal rollDir = constructForward\nlocal currentRollDeg = getRoll(worldVertical, rollDir, constructRight) \nrollPID:inject(-currentRollDeg)\n\n--Yaw\nlocal yawVelocity = vec3(core.getWorldAngularVelocity()):dot(constructUp) \nlocal yawDirection = worldVertical\nyawPID:inject(yawVelocity)\n\n\nlocal targetAngularVelocity = rollPID:get() * rollDir\n+ pitchPID:get() * constructRight\n+ (-yawInput * yawSpeedFactor* yawDirection) + (yawPID:get() * yawDirection)\n\n\n-- Engine commands\nlocal sumSpd = lat+lon+ver\n\nverPID:inject(-vec3(core.getWorldVelocity()):dot(constructUp))\nlonPID:inject(-vec3(core.getWorldVelocity()):dot(constructForward))\nlatPID:inject(-vec3(core.getWorldVelocity()):dot(constructRight))\n\nlocal stabVer=0\nlocal stabLon=0\nlocal stabLat=0\n\nif verticalInput==0 then\n\tstabVer=stabVer+(utils.clamp(verPID:get(),-1000, 1000)*constructUp)\nend\nif longitudinalInput==0 then\n\tstabLon=stabLon+(utils.clamp(lonPID:get(),-10, 10)*constructForward)\nend\nif lateralInput==0 then        \n\tstabLat=stabLat+(utils.clamp(latPID:get(),-10, 10)*constructRight)\nend\nlocal angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)\n\nif AutoBraking then\n    Nav:setEngineForceCommand('brake', stabVer*0.1+stabLon*7+stabLat*300+sumSpd-worldG, 1, 'brake', '', '', 100)\n    Nav:setEngineForceCommand('not_ground', stabLon+stabVer+stabLat+sumSpd-worldG, 0, 'not_ground', '', '', 0.1)\nelse\n    if landMode or holdMode then\n        Nav:setEngineForceCommand('brake', stabVer*0.1+stabLon*7+stabLat*300+sumSpd-worldG, 1, 'brake', '', '', 100)\n    else\n        Nav:setEngineForceCommand('brake', -vec3(core.getWorldVelocity())*100*brakeInput, 1, 'brake', '', '', 100)\n    end\n    vPid3:inject(lastSpeed-vec3(core.getWorldVelocity()):dot(constructForward))\n    local lonThr = utils.clamp(vPid3:get(),-10, 10)*constructForward\n    if longitudinalInput~=0 then\n       lonThr=stabLon\n    end\n    Nav:setEngineForceCommand('not_ground', lonThr+stabVer+stabLat+sumSpd-worldG, 0, 'not_ground', '', '', 0.1)\nend\n\nNav:setEngineTorqueCommand('torque', angularAcceleration, 1, 'torque', '', '', 100)\n\n\n\n\n\n","filter":{"args":[],"signature":"flush()","slotKey":"-2"},"key":"13"},{"code":"lateralInput = 0","filter":{"args":[{"value":"yawright"}],"signature":"actionStop(yawright)","slotKey":"-2"},"key":"14"},{"code":"lateralInput = 0","filter":{"args":[{"value":"yawleft"}],"signature":"actionStop(yawleft)","slotKey":"-2"},"key":"15"},{"code":"verticalInput = 0","filter":{"args":[{"value":"up"}],"signature":"actionStop(up)","slotKey":"-2"},"key":"16"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"speedup"}],"signature":"actionStop(action)","slotKey":"-2"},"key":"17"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"speeddown"}],"signature":"actionStop(action)","slotKey":"-2"},"key":"18"},{"code":"yawInput = 0","filter":{"args":[{"value":"right"}],"signature":"actionStop(right)","slotKey":"-2"},"key":"19"},{"code":"yawInput = 0","filter":{"args":[{"value":"left"}],"signature":"actionStop(left)","slotKey":"-2"},"key":"20"},{"code":"longitudinalInput = 0\nlastSpeed = vec3(core.getWorldVelocity()):dot(vec3(core.getConstructWorldOrientationForward()))","filter":{"args":[{"value":"forward"}],"signature":"actionStop(forward)","slotKey":"-2"},"key":"21"},{"code":"verticalInput = 0","filter":{"args":[{"value":"down"}],"signature":"actionStop(down)","slotKey":"-2"},"key":"22"},{"code":"brakeInput = brakeInput - 1\nlastSpeed = vec3(core.getWorldVelocity()):dot(vec3(core.getConstructWorldOrientationForward()))","filter":{"args":[{"value":"brake"}],"signature":"actionStop(brake)","slotKey":"-2"},"key":"23"},{"code":"longitudinalInput = 0\nlastSpeed = vec3(core.getWorldVelocity()):dot(vec3(core.getConstructWorldOrientationForward()))","filter":{"args":[{"value":"backward"}],"signature":"actionStop(backward)","slotKey":"-2"},"key":"24"},{"code":"lateralInput = 1","filter":{"args":[{"value":"yawright"}],"signature":"actionStart(yawright)","slotKey":"-2"},"key":"25"},{"code":"lateralInput = -1","filter":{"args":[{"value":"yawleft"}],"signature":"actionStart(yawleft)","slotKey":"-2"},"key":"26"},{"code":"verticalInput = 1","filter":{"args":[{"value":"up"}],"signature":"actionStart(up)","slotKey":"-2"},"key":"27"},{"code":"Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)","filter":{"args":[{"value":"stopengines"}],"signature":"actionStart(stopengines)","slotKey":"-2"},"key":"28"},{"code":"pitchInput = pitchInput + 1","filter":{"args":[{"value":"speedup"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"29"},{"code":"pitchInput = pitchInput - 1","filter":{"args":[{"value":"speeddown"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"30"},{"code":"yawInput = yawInput - 1","filter":{"args":[{"value":"right"}],"signature":"actionStart(right)","slotKey":"-2"},"key":"31"},{"code":"if switch_l.getState()==1 then\n    switch_l.deactivate()\n    landMode = false\n    verticalInput = 0\nelse\n    switch_l.activate()\n    landMode = true\n    lastSpeed = 0\nend","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"32"},{"code":"if switch_r.getState()==1 then\n    switch_r.deactivate()\n    holdMode = false\n    system.freeze(1)\nelse\n    switch_r.activate()\n    holdMode = true\n    lastSpeed = 0\n    system.freeze(0)\nend","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"33"},{"code":"if Nav.control.isAnyHeadlightSwitchedOn() == 1 then\n    Nav.control.switchOffHeadlights()\nelse\n    Nav.control.switchOnHeadlights()\nend\n","filter":{"args":[{"value":"light"}],"signature":"actionStart(light)","slotKey":"-2"},"key":"34"},{"code":"yawInput = 1","filter":{"args":[{"value":"left"}],"signature":"actionStart(left)","slotKey":"-2"},"key":"35"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionStart(groundaltitudeup)","slotKey":"-2"},"key":"36"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionStart(groundaltitudedown)","slotKey":"-2"},"key":"37"},{"code":"gearExtended = not gearExtended\nif gearExtended then\n    Nav.control.extendLandingGears()\nelse\n    Nav.control.retractLandingGears()\nend\n","filter":{"args":[{"value":"gear"}],"signature":"actionStart(gear)","slotKey":"-2"},"key":"38"},{"code":"longitudinalInput = 1\nlastSpeed = 0","filter":{"args":[{"value":"forward"}],"signature":"actionStart(forward)","slotKey":"-2"},"key":"39"},{"code":"verticalInput = -1","filter":{"args":[{"value":"down"}],"signature":"actionStart(down)","slotKey":"-2"},"key":"40"},{"code":"brakeInput = brakeInput + 1\nlocal longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\nlastSpeed = 0","filter":{"args":[{"value":"brake"}],"signature":"actionStart(brake)","slotKey":"-2"},"key":"41"},{"code":"Nav:toggleBoosters()","filter":{"args":[{"value":"booster"}],"signature":"actionStart(booster)","slotKey":"-2"},"key":"42"},{"code":"longitudinalInput = -1\nlastSpeed = 0","filter":{"args":[{"value":"backward"}],"signature":"actionStart(backward)","slotKey":"-2"},"key":"43"},{"code":"if antigrav ~= nil then antigrav.toggle() end","filter":{"args":[{"value":"antigravity"}],"signature":"actionStart(antigravity)","slotKey":"-2"},"key":"44"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)","filter":{"args":[{"value":"groundaltitudeup"}],"signature":"actionLoop(groundaltitudeup)","slotKey":"-2"},"key":"45"},{"code":"Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)","filter":{"args":[{"value":"groundaltitudedown"}],"signature":"actionLoop(groundaltitudedown)","slotKey":"-2"},"key":"46"},{"code":"local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)\nif (longitudinalCommandType == axisCommandType.byTargetSpeed) then\n    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)\n    if (math.abs(targetSpeed) > constants.epsilon) then\n        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))\n    end\nend\n","filter":{"args":[{"value":"brake"}],"signature":"actionLoop(brake)","slotKey":"-2"},"key":"47"},{"code":"if AutoBraking==true then\n    AutoBraking = false\n    switch_3.activate()\n    lastSpeed = vec3(core.getWorldVelocity()):dot(vec3(core.getConstructWorldOrientationForward()))\nelse\n    AutoBraking = true\n    switch_3.deactivate()\n    lastSpeed = 0\nend","filter":{"args":[{"value":"option3"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"48"},{"code":"--Helper functions\nendLanding = function ()\n    verticalInput=0\n    landMode = false\nend\n\n\nfunction round(val, decimal)\n  local exp = decimal and 10^decimal or 1\n  return math.ceil(val * exp - 0.5) / exp\nend\n\n\nbuf = {}\nbuf[1]=0\nbuf[2]=0\nbuf[3]=0\nmedianCounter = 1\nfunction median(newVal)\n  buf[medianCounter] = newVal\n  local nextCount = medianCounter+1      \n  if nextCount > 3 then \n      medianCounter = 1\n  else\n     medianCounter = nextCount\n  end\n  if math.max(buf[1], buf[2]) == math.max(buf[2], buf[3]) then\n     return math.max(buf[1], buf[3])\n  else\n     return math.max(buf[2], math.min(buf[1], buf[3]))\n  end\nend\n\n\n\nfunction getPitch(gravityDirection, forward, right)\n    local horizontalForward = gravityDirection:cross(right):normalize_inplace() -- Cross forward?\n    local pitch = math.acos(utils.clamp(horizontalForward:dot(-forward), -1, 1)) * constants.rad2deg -- acos?\n    if horizontalForward:cross(-forward):dot(right) < 0 then pitch = -pitch end -- Cross right dot forward?\n    return pitch\nend\n\n\npitchF = function()\n   return globalPitch \nend\n\n\nholdText = function()\n    if holdMode then\n        return \"HOLD\"\n    end\n    return \"\"\nend\n\n\nlandText = function()\n    if landMode then\n        return [[<span class=\"blink\">LANDING</span>]]\n    end\n    return \"\"\nend\n\n\naltitue = function() \n    local seaAlt = core.getAltitude()\n    local telemeterDist = telemeter.getDistance()\n    if telemeterDist >= 0 then\n       return math.floor(telemeterDist)\n    end\n    return math.floor(seaAlt)\nend\n\n\nhspeed = function() \n    local speedV=vec3(core.getWorldVelocity())\n    local up=vec3(core.getWorldGravity())\n    local project= speedV:project_on(up)\n    local speedH=speedV-project\n    local len = math.floor(speedH:len()*3.6)\n    return len\nend\n\n\nvspeedSymbol = function()\n    local speedV=vec3(core.getWorldVelocity())\n    local up=vec3(core.getWorldGravity())\n    local project= speedV:project_on(up)\n    local len = math.floor(project:len()*3.6)\n    local zAxis = math.floor(project.z)\n    symbol = \"\"\n    if len > 0 then\n        if zAxis > 0 then\n            symbol = \"&#8593;\"\n        elseif zAxis < 0 then\n            symbol = \"&#8595;\"     \n        end\n    end\n    return symbol\nend\n\n\nvspeed = function() \n    local speedV=vec3(core.getWorldVelocity())\n    local up=vec3(core.getWorldGravity())\n    local project= speedV:project_on(up)\n    local len = math.floor(project:len()*3.6)\n    return len\nend\n\n\naccel = function() \n  return round(median(vec3(core.getWorldAcceleration()):len()/9.81),1)\nend\n\n\nfuelTimeLeft = {}\nfuelPercent = {}\nupdateFuel = function()\n    if (atmofueltank_size > 0) then \n        for i = 1, atmofueltank_size do\n            fuelTimeLeft[i] = json.decode(atmofueltank[i].getData()).timeLeft\n            fuelPercent[i] = json.decode(atmofueltank[i].getData()).percentage\n        end\n    end\nend\n\n\ngetFuelPercent = function(i)\n    return fuelPercent[i]\nend\n\n\ngetFuelTime = function(i)\n    if (fuelTimeLeft[i] ~= \"n/a\" and fuelTimeLeft[i] ~= nil) then\n       return math.floor(fuelTimeLeft[i] / 60)\n    else\n       return 0\n    end\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"49"},{"code":"--HUD CLASS\nblock = {}\nfunction block:new(content,style,tag)\n    local obj={}\n    obj.tag = tag or \"div\"\n    obj.style = style or \"\"\n    obj.content = {}\n    table.insert(obj.content,content)\n    \n    function obj:css(css) \n        self.style = self.style .. css .. \";\"\n    end\n    \n    function obj:set(html)\n        for i,v in ipairs(self.content) do \n   \t \t\tself.content[i] = nil\n\t   end\n        table.insert(self.content,html)\n    end\n    \n    function obj:add(html)\n        table.insert(self.content,html)\n    end\n    \n    function obj:html()\n        local res = \"<\".. self.tag ..\" style='\"..self.style ..\"'>\"\n        for i,v in ipairs(self.content) do  \n            if type(v) == \"table\" then\n                if v['html']==nil then \n                    system.print(\"ERROR TABLE INPUT\")\n                else\n                    res = res .. v:html()\n                end\n            elseif type(v)==\"function\" then\n                 bres = v()\n                 if bres == nil then\n                     res = res .. \"\"\n                 else\n                     res = res .. v()\n                 end\n            else \n                res = res .. v\n            end\n        end\n        res = res .. \"</\".. self.tag ..\">\"\n        return  res\n    end\n        \n    setmetatable(obj, self)\n    self.__index = self; return obj\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"50"},{"code":"--HUD CONTENT\nhud = block:new(\"\",\"\",\"html\") \n\nstyles = [[\n<style>\n.blink {\n  animation: blink1 2s linear infinite;\n}\n@keyframes blink1 {\n  0% { color: rgba(240, 67, 32, 1); }\n  50% { color: rgba(240, 67, 32, 0); }\n  100% { color: rgba(240, 67, 32, 1); }\n}\n</style>\n]]\n\nhud:add(styles)\n\nfooter = block:new()\n\nfooterBG = block:new()\nfooterBG:css(\"position: absolute\")\nfooterBG:css(\"border-top: 3px solid #F4F4F4\")\nfooterBG:css(\"border-left: 1px solid #F4F4F4\")\nfooterBG:css(\"border-right: 1px solid #F4F4F4\")\nfooterBG:css(\"box-sizing: border-box\")\nfooterBG:css(\"border-radius: 50%\")\nfooterBG:css(\"filter: blur(1px)\")\nfooterBG:css(\"height:34vh\")\nfooterBG:css(\"width:26vw\")\nfooterBG:css(\"padding:1vh\")\n--footerBG:css(\"z-index:-100\")\n\nfooterPanel = block:new()\n\nfooterPanel:css(\"font-size: 3vh\")\nfooterPanel:css(\"color: #F4F4F4\")\nfooterPanel:css(\"position:relative\")\n\nfooterHoldText = block:new()\nfooterHoldText:css(\"position:absolute\")\nfooterHoldText:css(\"color: #41C179\")\nfooterHoldText:css(\"left:0vw\")\nfooterHoldText:css(\"top:10vh\")\nfooterHoldText:css(\"width:100%\")\nfooterHoldText:css(\"text-align:center\")\nfooterHoldText:add(holdText)\nfooterPanel:add(footerHoldText)\n\nfooterLandText = block:new()\nfooterLandText:css(\"position:absolute\")\nfooterLandText:css(\"color: #41C179\")\nfooterLandText:css(\"left:0vw\")\nfooterLandText:css(\"top:13vh\")\nfooterLandText:css(\"width:100%\")\nfooterLandText:css(\"text-align:center\")\nfooterLandText:add(landText)\nfooterPanel:add(footerLandText)\n\nfooterHSpeedText = block:new()\nfooterHSpeedText:css(\"position:absolute\")\nfooterHSpeedText:css(\"left:1.5vw\")\nfooterHSpeedText:css(\"top:10vh\")\nfooterHSpeedText:add(\"SPD<span style='font-size:1.5vh;'>h</span>\")\nfooterPanel:add(footerHSpeedText)\n\nfooterHSpeedVal = block:new()\nfooterHSpeedVal:css(\"position:absolute\")\nfooterHSpeedVal:css(\"left:4.5vw\")\nfooterHSpeedVal:css(\"top:10vh\")\nfooterHSpeedVal:css(\"width:2.8vw\")\nfooterHSpeedVal:css(\"text-align:right\")\nfooterHSpeedVal:add(hspeed)\nfooterPanel:add(footerHSpeedVal)\n\nfooterHSpeedAfter = block:new()\nfooterHSpeedAfter:css(\"position:absolute\")\nfooterHSpeedAfter:css(\"left:7.6vw\")\nfooterHSpeedAfter:css(\"top:10vh\")\nfooterHSpeedAfter:add(\" <span style='font-size:1.5vh;'>km\\\\h</span>\")\nfooterPanel:add(footerHSpeedAfter)\n\n\nfooterVSpeedText = block:new()\nfooterVSpeedText:css(\"position:absolute\")\nfooterVSpeedText:css(\"left:1.5vw\")\nfooterVSpeedText:css(\"top:13vh\")\nfooterVSpeedText:add(\"SPD<span style='font-size:1.5vh;'>v</span>\")\nfooterPanel:add(footerVSpeedText)\n\nfooterVSpeedSymbol = block:new()\nfooterVSpeedSymbol:css(\"position:absolute\")\nfooterVSpeedSymbol:css(\"left:4.2vw\")\nfooterVSpeedSymbol:css(\"top:13vh\")\nfooterVSpeedSymbol:add(vspeedSymbol)\nfooterPanel:add(footerVSpeedSymbol)\n\nfooterVSpeedVal = block:new()\nfooterVSpeedVal:css(\"position:absolute\")\nfooterVSpeedVal:css(\"left:4.5vw\")\nfooterVSpeedVal:css(\"top:13vh\")\nfooterVSpeedVal:css(\"width:2.8vw\")\nfooterVSpeedVal:css(\"text-align:right\")\nfooterVSpeedVal:add(vspeed)\nfooterPanel:add(footerVSpeedVal)\n\nfooterVSpeedAfter = block:new()\nfooterVSpeedAfter:css(\"position:absolute\")\nfooterVSpeedAfter:css(\"left:7.6vw\")\nfooterVSpeedAfter:css(\"top:13vh\")\nfooterVSpeedAfter:add(\" <span style='font-size:1.5vh;'>km\\\\h</span>\")\nfooterPanel:add(footerVSpeedAfter)\n\n\nfooterAltText = block:new()\nfooterAltText:css(\"position:absolute\")\nfooterAltText:css(\"right:6.5vw\")\nfooterAltText:css(\"top:10vh\")\nfooterAltText:add(\"ALT\")\nfooterPanel:add(footerAltText)\n\nfooterAltVal = block:new()\nfooterAltVal:css(\"position:absolute\")\nfooterAltVal:css(\"right:2.3vw\")\nfooterAltVal:css(\"top:10vh\")\nfooterAltVal:css(\"width:3.6vw\")\nfooterAltVal:css(\"text-align:right\")\nfooterAltVal:add(altitue)\nfooterPanel:add(footerAltVal)\n\nfooterAltAfter = block:new()\nfooterAltAfter:css(\"position:absolute\")\nfooterAltAfter:css(\"right:1.5vw\")\nfooterAltAfter:css(\"top:10vh\")\nfooterAltAfter:add(\" <span style='font-size:1.5vh;'>m</span>\")\nfooterPanel:add(footerAltAfter)\n\n\nfooterPitchText = block:new()\nfooterPitchText:css(\"position:absolute\")\nfooterPitchText:css(\"right:6.5vw\")\nfooterPitchText:css(\"top:13vh\")\nfooterPitchText:add(\"ACC\")\nfooterPanel:add(footerPitchText)\n\nfooterPitchVal = block:new()\nfooterPitchVal:css(\"position:absolute\")\nfooterPitchVal:css(\"right:2.3vw\")\nfooterPitchVal:css(\"top:13vh\")\nfooterPitchVal:css(\"width:3.6vw\")\nfooterPitchVal:css(\"text-align:right\")\nfooterPitchVal:add(accel)\nfooterPanel:add(footerPitchVal)\n\nfooterPitchAfter = block:new()\nfooterPitchAfter:css(\"position:absolute\")\nfooterPitchAfter:css(\"right:1.5vw\")\nfooterPitchAfter:css(\"top:13vh\")\nfooterPitchAfter:add(\"<span style='font-size:1.5vh;'>g</span>\")\nfooterPanel:add(footerPitchAfter)\n\n\n\nfooter:css(\"position: absolute\")\nfooter:css(\"bottom:10vh\")\nfooter:css(\"left:37vw\")\nfooter:css(\"height:17vh\")\nfooter:css(\"width:26vw\")\nfooter:css(\"overflow:hidden\")\nfooter:add(footerPanel)\n\nhud:add(footer)\n\nPrimaryR = 244\nPrimaryG = 244\nPrimaryB = 244\n\nrgb = [[rgb(]] .. PrimaryR.. \",\" .. PrimaryG.. \",\" .. PrimaryB.. [[)]]\nrgbdim = [[rgb(]] .. PrimaryR .. \",\" .. PrimaryG.. \",\" .. PrimaryB .. [[)]]\nrgbdimmer = [[rgb(]] .. PrimaryR .. \",\" .. PrimaryG .. \",\" .. PrimaryB .. [[)]]\nfunction updateHud()\n    local svg = \"\"\n    local leftX=80\n    local rightX=80\n    local rgbO = rgb\n    local rgbdimO = rgbdim\n    local rgbdimmerO = rgbdimmer\n    svg = [[\n        <svg style=\"background:none; position:absolute; top:0; left:0\" height=\"100vh\" width=\"100vw\" viewBox=\"0 0 1920 1080\">\n        <g class=\"majorLine\" style=\"stroke:]]..rgbO..[[;stroke-width:3;fill-opacity:0;\">\n            <path d=\"M 700 0 L 740 35 Q 960 55 1180 35 L 1220 0\"/>\n        </g>\n        ]]\n    local color, colorMod\n    x1 = 920\n    if (atmofueltank_size > 0) then \n        for i = 1, atmofueltank_size do\n            local fuelTimeDisplay = fuelTimeLeft[i]\n            if fuelPercent[i] ~= nil then\n                colorMod = math.floor(fuelPercent[i]*2.55)\n                if (fuelTimeDisplay ~= \"n/a\") then\n                    fuelTimeDisplay = math.floor(fuelTimeDisplay / 60)\n                    if (fuelTimeDisplay > 1) then\n                        color = [[rgb(]] .. 255-colorMod .. \",\" .. colorMod .. \",\" .. 0 .. [[)]]\n                    else\n                        color = [[rgb(]] .. 255 .. \",\" .. 0 .. \",\" .. 0 .. [[)]]\n                    end\n                else\n                    color = [[rgb(]] .. 255-colorMod .. \",\" .. colorMod .. \",\" .. 0 .. [[)]]\n                end\n                svg = svg..[[\n                    <g class=\"text\">\n                        <g font-size=18>\n                            <text x=\"]]..x1..[[\" y=\"32\" text-anchor=\"end\" style=\"fill:]] .. rgbO .. [[\">FUEL</text>\n                            <text x=\"]]..(x1+120)..[[\" y=\"32\" text-anchor=\"end\" style=\"fill:]] .. color .. [[\">]]..fuelPercent[i]..[[% ]]..fuelTimeDisplay..[[ min</text>\n                        </g>\n                    </g>]]\n                x1 = x1+150\n            end\n        end\n    end\n    -- After the HUD, set RGB values back to undimmed even if view is unlocked\n    rgb = rgbO\n    rgbdim = rgbdimO\n    rgbdimmer = rgbdimmerO\n    svg = svg..[[</svg>]]\n\treturn svg\nend\n\nhud:add(updateHud)\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"51"},{"code":"","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"52"}],"methods":[],"events":[]}
